docker pull nginx
docker pull nginx:1.20
docker images
docker run nginx
docker ps
docker ps -a
docker run -d nginx
docker run -d nginx:1.20
docker run -p 90:80 -d nginx
docker run -p 80:80 -d nginx:1.20
docker ps
docker ps -a
docker rm containerID constainerID
docker stop containerID
docker rm containerId
docker run --name test -d nginx # name of container is test
docker rename containerName Newname #change name of exixsting container
docker ps
docker stop containerName
docker ps -a
docker start conatinerName
docker images
docker rmi nginx:1.20 # remove image
docker stop and remove container to remove images
docker rmi containername
docker --help
docker run --help
docker pull mongo:4.4.6
docker images
docker run -e MOngoDB_ROOT_usernae=root -e Mongorootpasswd=passwd -p 27017:27017 -d mongo.4.4.0 # -e fro passoing envirimental varibles to the docker container -p is port d is detached
8081 is Mongoexpress
docker logs containerId # to check logs for errors , etc
docker inspect contaiunerId # to insoect or get all detaiklsof container
docker inspect containerId | grep IPAddress
docker neetwork-------------------
docker network ls //bridge, host, none
none --> not able acces anything outside this container execpt resource of container
docker ru
docker run -d --network none alpine
docker ps -a # apline image is exited imediately beacuse apline is just os. application is there. container run service or run some computaion or to run. when no service container exits immediately
docker exec -it containerId sh
ping google.com
brige network --> can acces external resources and containers in same network
docker run -d  apline sleep 500
docker exec -it containerid sh # bridge default network ,, docker run -d --network bridge alpine sleep 500
default network forbids access other containers suing cintainername which is bridge network
to acces container using cintauner name create custom bridge network. # we cannto custom none or custom host network 
to create custom bride nwk# docker network create networkname --driver bridge
docker network ls
docker stop $(docker ps -a)
docker rm $()[Ddocker ps -a)
docker run -e Mono=root -e mongoinit=passwd -p 270117"27-17 -d --net mongo-net --name mongodb mongo:4.4.6
Host network # you can acces from conaatiner
Dockerfile | Building Custom Image | Deploying Spring Boot in Docker
dockerfile is a text document with list of instructions. all instructsipon follwed ny argumebts
to copy from local to image # copy souce destinastion 
mvn clean package # it will geneate Jar file to statrt application. in taeget dir. # to run application.  java -jar target/todo-1.20.jar
Dockerfile
# bdownload java
FROM openjdk:18-jdk
# copy jar from local to image 
ADD target/todo-1.0.2.jar todo-1.0.2.jar
# add or copy boith are same but add can download urls, extrat local tar to root image
# run application jar
ENTRY POINT RUNS TO HELP[A[B[B
cmd replace entire command. but entrypointappends weith existing commands.
ENTRYPOINT["java", -jar", "todo-1.02.jar"

docker build -t todoapiimageb. # t is tag for image 
dpocker images

ARG JAVA_VERSION="18-jdk"
FROM openjdk=${JAVA_VERSION}
ENV OPROJECY_NAME="todoi-api"   
# ARG is name of a variable  # accessed using    docker build -t todo . --build-arg JAVA_VERSION=18.jdk
 env vs arg is env is persisted when container image is runs .means u can acces tis variables within the container .   arg is temporary and can be used only during building image.if use same name of arg and env then env overrides arg
# create folder 
RUN mkdir ${APP_H0ME}
workdir ${app_home}
EXPOSE 8080 # To expose is used when other conatiner wants to talk to service. diifeerent from -p flag which publish port as hostport containrerport bindng. 
to access service from local host. 
expose is used when other conatiner wants to talk to service which is in different container
LABEL version="1.1.0"
