docker pull nginx
docker pull nginx:1.20
docker images
docker run nginx
docker ps
docker ps -a
docker run -d nginx
docker run -d nginx:1.20
docker run -p 90:80 -d nginx
docker run -p 80:80 -d nginx:1.20
docker ps
docker ps -a
docker rm containerID constainerID
docker stop containerID
docker rm containerId
docker run --name test -d nginx # name of container is test
docker rename containerName Newname #change name of exixsting container
docker ps
docker stop containerName
docker ps -a
docker start conatinerName
docker images
docker rmi nginx:1.20 # remove image
docker stop and remove container to remove images
docker rmi containername
docker --help
docker run --help
docker pull mongo:4.4.6
docker images
docker run -e MOngoDB_ROOT_usernae=root -e Mongorootpasswd=passwd -p 27017:27017 -d mongo.4.4.0 # -e fro passoing envirimental varibles to the docker container -p is port d is detached
8081 is Mongoexpress
docker logs containerId # to check logs for errors , etc
docker inspect contaiunerId # to insoect or get all detaiklsof container
docker inspect containerId | grep IPAddress
docker neetwork-------------------
docker network ls //bridge, host, none
none --> not able acces anything outside this container execpt resource of container
docker ru
docker run -d --network none alpine
docker ps -a # apline image is exited imediately beacuse apline is just os. application is there. container run service or run some computaion or to run. when no service container exits immediately
docker exec -it containerId sh
ping google.com
brige network --> can acces external resources and containers in same network
docker run -d  apline sleep 500
docker exec -it containerid sh # bridge default network ,, docker run -d --network bridge alpine sleep 500
default network forbids access other containers suing cintainername which is bridge network
to acces container using cintauner name create custom bridge network. # we cannto custom none or custom host network 
to create custom bride nwk# docker network create networkname --driver bridge
docker network ls
docker stop $(docker ps -a)
docker rm $()[Ddocker ps -a)
docker run -e Mono=root -e mongoinit=passwd -p 270117"27-17 -d --net mongo-net --name mongodb mongo:4.4.6
Host network # you can acces from conaatiner
